<event_sessions xmlns="http://schemas.microsoft.com/sqlserver/2008/07/extendedeventconfig">
  <event_session name="log_io" maxMemory="4" eventRetentionMode="allowSingleEventLoss" trackCausality="false" dispatchLatency="30" maxEventSize="0" memoryPartitionMode="none">
    <templateCategory>
      <!-- _locID_text="templateCategory" _locComment = "" -->Мониторинг системы</templateCategory>
    <templateName>
      <!-- _locID_text = "templateName" _locComment = "" -->Отслеживание ввода-вывода в файле журнала базы данных</templateName>
    <templateDescription>
      <!-- _locID_text = "templateDescription" _locComment = "" -->Этот шаблон отслеживает ввод-вывод в файлах журнала базы данных на сервере, отслеживая асинхронный ввод-вывод, сбросы журнала базы данных на диск, запись в файлы, задержку спин-блокировок типа LOGFLUSHQ и ожидания типа WRITELOG. Этот шаблон собирает данные двумя способами: необработанные данные собираются в кольцевой буфер, а сведения о задержке спин-блокировок подвергаются статистической обработке по входному буферу (sql_text). Сеанс фильтруется с расчетом на один файл журнала в базе данных. Если имеется несколько файлов журнала, можно изменить фильтр так, чтобы свойства file_write_completed и file_written events включали file_id более 2.</templateDescription>
    <event package="sqlos" name="async_io_completed"/>
    <event package="sqlos" name="async_io_requested"/>
    <event package="sqlos" name="spinlock_backoff">
      <action package="sqlserver" name="sql_text"/>
      <predicate>
        <leaf>
          <comparator name="equal_uint64" package="package0"></comparator>
          <event name="spinlock_backoff" package="sqlos" field="type"></event>
          <value>85</value>
        </leaf>
      </predicate>
    </event>
    <event package="sqlos" name="wait_info">
      <action package="sqlserver" name="client_app_name"/>
      <action package="sqlserver" name="is_system"/>
      <action package="sqlserver" name="session_id"/>
      <predicate>
        <and>
          <leaf>
            <comparator name="equal_uint64" package="package0"></comparator>
            <event name="wait_info" package="sqlos" field="opcode"></event>
            <value>1</value>
          </leaf>
          <leaf>
            <comparator name="equal_uint64" package="package0"></comparator>
            <event name="wait_info" package="sqlos" field="wait_type"></event>
            <value>182</value>
          </leaf>
        </and>
      </predicate>
    </event>
    <event package="sqlserver" name="databases_log_flush"/>
    <event package="sqlserver" name="file_write_completed">
      <parameter name="collect_path" value="1"/>
      <predicate>
        <leaf>
          <comparator name="equal_uint64" package="package0"></comparator>
          <event name="file_write_completed" package="sqlserver" field="file_id"></event>
          <value>2</value>
        </leaf>
      </predicate>
    </event>
    <event package="sqlserver" name="file_written">
      <parameter name="collect_path" value="1"/>
      <predicate>
        <leaf>
          <comparator name="equal_uint64" package="package0"></comparator>
          <event name="file_written" package="sqlserver" field="file_id"></event>
          <value>2</value>
        </leaf>
      </predicate>
    </event>
    <target package="package0" name="histogram">
      <parameter name="filtering_event_name" value="sqlos.spinlock_backoff"/>
      <parameter name="source" value="sqlserver.sql_text"/>
    </target>
    <target package="package0" name="ring_buffer"/>
  </event_session>
</event_sessions>
